events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Google Cloud Run DNS resolver (Docker's internal DNS)
    # 8.8.8.8 is used as fallback for external DNS resolution
    resolver 8.8.8.8 8.8.4.4 valid=10s ipv6=off;
    resolver_timeout 5s;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;

    server {
        listen ${PORT};
        server_name localhost;

        root /usr/share/nginx/html;
        index index.html;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript application/json;

        # Handle Flutter web routing
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Health check endpoint for Cloud Run
        location /healthz {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API proxy to model service
        location /api/v1/model/ {
            proxy_pass ${MODEL_SERVICE_URL};
            
            # HTTP version and connection settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Forward original request information
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Critical: Use the backend's host, not the proxy's host
            proxy_set_header Host $proxy_host;
            
            # SSL settings
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Allow service to start even if backend is unavailable
            proxy_intercept_errors on;
            error_page 502 503 504 =503 @service_unavailable;
        }

        # API proxy to user preference service
        location /api/v1/allergy-classification/ {
            proxy_pass ${USER_PREFERENCE_SERVICE_URL};
            
            # HTTP version and connection settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Forward original request information
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Critical: Use the backend's host, not the proxy's host
            proxy_set_header Host $proxy_host;
            
            # SSL settings
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Allow service to start even if backend is unavailable
            proxy_intercept_errors on;
            error_page 502 503 504 =503 @service_unavailable;
        }

        # Health check proxy for user preference service
        location /health {
            proxy_pass ${USER_PREFERENCE_SERVICE_URL}/health;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $proxy_host;
            
            proxy_connect_timeout 30s;
            proxy_read_timeout 30s;
            
            # Allow service to start even if backend is unavailable
            proxy_intercept_errors on;
            error_page 502 503 504 =503 @service_unavailable;
        }

        # Error handler for unavailable services
        location @service_unavailable {
            add_header Content-Type application/json;
            return 503 '{"error": "Service temporarily unavailable", "message": "Backend service is not responding"}';
        }
    }
}
